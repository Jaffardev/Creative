@using Creative.Client.Services;
@using Creative.Shared.Models;
@using Creative.Shared;
@using MudBlazor

@inherits LayoutComponentBase
@inject ILookupService lookupService

<MudDialogProvider />
<MudThemeProvider />
<MudSnackbarProvider />
<MudMessageBox />
<MudOverlay @bind-Visible="ShowOverlay" DarkBackground="true" ZIndex="9999" />
<MudLayout>
    <MudAppBar Color="Color.Primary" Fixed="false" Dense="true">
        <MudLink Color="Color.Inherit" Href="/">Creative School</MudLink>
        @* <MudToolBar> *@
            <NavMenu />
        @* </MudToolBar> *@
        <MudSpacer></MudSpacer>

        <MudAutocomplete Class="text-white" IconSize="Size.Medium" ProgressIndicatorColor="Color.Inherit" InputMode="InputMode.search"
            DebounceInterval="500" Clearable="true" AutoFocus="true" Immediate="false" Dense="true"
            Margin="Margin.Dense" ResetValueOnEmptyText="true" MinCharacters="1" KeyDownPreventDefault="true"
            KeyUpPreventDefault="true" T="Item" Placeholder="Parent / Student Name" Variant="Variant.Outlined"
            AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Success" SearchFuncWithCancel="@Search"
            ValueChanged="@LoadData" ShowProgressIndicator="true">
            <ItemTemplate Context="e">
                <MudText>
                    <MudIcon
                        Icon="@(e.Identity==Identity.Parent? Icons.Material.Filled.Man :Icons.Material.Filled.Face)"
                        Class="mb-n1 mr-3" />@($"{e.Name} ({e.Identity.ToString()})")
                </MudText>
            </ItemTemplate>
            <NoItemsTemplate>
                <MudText Align="Align.Center" Class="px-4 py-1">
                    No data found
                </MudText>
            </NoItemsTemplate>
        </MudAutocomplete>
        <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" />
    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium">
            <CascadingValue Name="ShowOverlay" Value="@ShowOverlay">
                <CascadingValue Name="SelectedCustomer" Value="@SelectedCustomer">
                    @Body
                </CascadingValue>
            </CascadingValue>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    public bool ShowOverlay { get; set; } = false;
    public Item? SelectedCustomer { get; set; } = new();

    private async Task<IEnumerable<Item>> Search(string value, CancellationToken token)
    {
        await Task.Delay(1000);

        if (string.IsNullOrEmpty(value))
            return Enumerable.Empty<Item>();

        ApiResult<AcademicLookups> parents = await lookupService.Get(Lookup.ParentsAndStudent, searchTerm: value);

        if (parents.IsSuccess)
            return parents.Data?.ParentsAndStudent ?? new();

        return Enumerable.Empty<Item>();
    }

    private async Task LoadData(Item item)
    {
        if (item is not null)
        {
            Console.WriteLine(item.Name);
            SelectedCustomer = item;
            StateHasChanged();
        }
    }

}