@page "/admission"
@using System.ComponentModel.DataAnnotations;
@using Creative.Client.Models;
@using Creative.Client.Pages.Components
@using Creative.Client.Services;
@using Creative.Shared.Models;
@using Creative.Shared;
@using MudBlazor

@inject NavigationManager navManager;
@inject ILookupService _lookupService;
@inject IParentService _parentService;
@inject IStudentService _studentService;
@inject IDialogService DialogService;
@inject ILookupService lookupService
@inject ISnackbar Snackbar


<MudGrid>
      <MudItem md="12"><MudText Typo="Typo.h5">Parent Screen</MudText></MudItem>
    <MudItem md="2">
        <MudSelect T="decimal?" Label="Branch" AnchorOrigin="Origin.BottomCenter" @bind-Value="searchBranchId">
            <MudSelectItem T="decimal?" Value="0">All</MudSelectItem>
            <MudItems DT="ItemType.Decimal" Lookups="lookups?.Data?.Branches" DataStatus="lookups.Status"></MudItems>
        </MudSelect>

        <MudCheckBox Label="InCompleted Entry" @bind-Checked="searchWithoutStudent" Color="Color.Primary"></MudCheckBox>
        <MudAutocomplete IconSize="Size.Medium" ProgressIndicatorColor="Color.Success" InputMode="InputMode.search"
                         DebounceInterval="500" Clearable="true" AutoFocus="true" Immediate="false" Dense="true"
                         Margin="Margin.Dense" ResetValueOnEmptyText="true" MinCharacters="1" KeyDownPreventDefault="true"
                         KeyUpPreventDefault="true" T="Item" Placeholder="Type to search" Variant="Variant.Outlined"
                         SearchFuncWithCancel="@Search"
                         ValueChanged="@LoadData" ShowProgressIndicator="true" HelperText="Search by Parent/Student Name,CivilId,Code,Tel1,Tel2">
            <ProgressIndicatorTemplate>
                <MudProgressLinear Size="Size.Small" Indeterminate="true" Color="Color.Default" />
            </ProgressIndicatorTemplate>
            <ItemTemplate Context="e">
                <MudText>
                    <MudIcon Icon="@(e.Identity==Identity.Parent? Icons.Material.Filled.Man :Icons.Material.Filled.Face)"
                             Class="mb-n1 mr-3" />@($"{e.Name} ({e.Identity.ToString()})")
                </MudText>
            </ItemTemplate>
            <NoItemsTemplate>
                <MudText Align="Align.Center" Class="px-4 py-1">
                    No data found
                </MudText>
            </NoItemsTemplate>
        </MudAutocomplete>

         
                <MudPaper Width="100%">
            <MudText Typo="Typo.h6" Class="m-2">Recent Parents</MudText>
                    @if (parentItems.Status == DataStatus.Loading)
                    {
                        for (int i = 0; i < 5; i++)
                        {
                            <MudSkeleton SkeletonType="SkeletonType.Text"></MudSkeleton>
                        }
                    }
                    else
                    {
                        <MudList Clickable="true" Dense="true" SelectedItemChanged="OnChangeParentSelection">
                            @foreach (var parent in parentItems.Data)
                            {
                                <MudListItem Value="@parent.Id" Text="@parent.Name11" Avatar="@Icons.Material.Filled.Image" />
                            }
                        </MudList>
                    }
                </MudPaper>
             
    </MudItem>
    <MudItem md="10">

        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                    
                       

                        <MudItem xs="2">
                            <MudTextField ReadOnly="true" Label="Code" InputType="InputType.Number" @bind-Value="model.Code"
                                          For="@(() => model.Code)" HideSpinButtons="true" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="6" sm="3">
                                    <MudTextField Label="First Name (Ar)" Margin="Margin.Dense" InputType="InputType.Text"
                                    @bind-Value="model.Name11" For="@(() => model.Name11)" />
                                </MudItem>
                                <MudItem xs="6" sm="3">
                                    <MudTextField Label="Mid Name (Ar)" Margin="Margin.Dense" InputType="InputType.Text"
                                    @bind-Value="model.Name12" For="@(() => model.Name12)" />
                                </MudItem>
                                <MudItem xs="6" sm="3">
                                    <MudTextField Label="Last Name (Ar)" Margin="Margin.Dense" InputType="InputType.Text"
                                    @bind-Value="model.Name13" For="@(() => model.Name13)" />
                                </MudItem>
                                <MudItem xs="6" sm="3">
                                    <MudTextField Label="Family Name (Ar)" Margin="Margin.Dense" InputType="InputType.Text"
                                    @bind-Value="model.Name14" For="@(() => model.Name14)" />
                                </MudItem>

                            </MudGrid>
                        </MudItem>

                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="6" sm="3">
                                    <MudTextField Label="First Name (En)" Margin="Margin.Dense" InputType="InputType.Text"
                                    @bind-Value="model.Name21" For="@(() => model.Name21)" />
                                </MudItem>
                                <MudItem xs="6" sm="3">
                                    <MudTextField Label="First Name (En)" Margin="Margin.Dense" InputType="InputType.Text"
                                    @bind-Value="model.Name22" For="@(() => model.Name22)" />
                                </MudItem>
                                <MudItem xs="6" sm="3">
                                    <MudTextField Label="First Name (En)" Margin="Margin.Dense" InputType="InputType.Text"
                                    @bind-Value="model.Name23" For="@(() => model.Name23)" />
                                </MudItem>
                                <MudItem xs="6" sm="3">
                                    <MudTextField Label="First Name (En)" Margin="Margin.Dense" InputType="InputType.Text"
                                    @bind-Value="model.Name24" For="@(() => model.Name24)" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>

                        <MudItem xs="3">
                            <MudSelect T="decimal?" Label="Nationality" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.NationalId">
                                <MudItems DT="ItemType.Decimal" Lookups="lookups.Data?.Nationals" DataStatus="lookups.Status"></MudItems>
                            </MudSelect>
                        </MudItem>

                        <MudItem xs="3">
                            <MudSelect T="decimal?" Label="Job" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.JobId">
                                <MudItems DT="ItemType.Decimal" Lookups="lookups.Data?.Jobs" DataStatus="lookups.Status"></MudItems>
                            </MudSelect>
                        </MudItem>

                        <MudItem xs="3">
                            <MudNumericField Label="Civil ID" Margin="Margin.Dense" HideSpinButtons="true" @bind-Value="model.IdNo" For="@(() => model.IdNo)" InputType="InputType.Number" />
                        </MudItem>

                        <MudItem xs="3">
                            <MudDatePicker Editable="true" IconSize="Size.Small" Label="Civil ID Expire Date" Margin="Margin.Dense" DateFormat="dd/MM/yyyy"
                            @bind-Date="model.IdEndDate" For="@(() => model.IdEndDate)" />
                        </MudItem>

                        <MudItem xs="3">
                            <MudNumericField HideSpinButtons="true" Label="Tel1" Margin="Margin.Dense" @bind-Value="model.Tel1" For="@(() => model.Tel1)" InputType="InputType.Telephone" />
                        </MudItem>

                        <MudItem xs="3">
                            <MudNumericField HideSpinButtons="true" Label="Tel2" Margin="Margin.Dense" @bind-Value="model.Tel2" For="@(() => model.Tel2)" InputType="InputType.Telephone" />
                        </MudItem>

                        <MudItem xs="3">
                            <MudTextField Label="Address" Margin="Margin.Dense" @bind-Value="model.Address1" For="@(() => model.Address1)" InputType="InputType.Text" />
                        </MudItem>


                        <MudItem xs="3">
                            <MudTextField Label="Dept Chat" Margin="Margin.Dense" @bind-Value="model.Notes" For="@(() => model.Notes)" InputType="InputType.Text" />
                        </MudItem>
                        @* <MudItem>
                        <ValidationSummary />
                        </MudItem> *@
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudStack Row="true" Justify="Justify.FlexStart">
                        @if (decimal.TryParse(model.Code, out decimal _code) && _code > 0)
                        {
                            <MudButton Size="@Size.Small" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@(model.Id > 0 ? "Update" : "Save")</MudButton>
                            if (model.Id > 0)
                            {
                                <MudButton Size="@Size.Small" Variant="Variant.Filled" Color="Color.Error" OnClick="@(()=>Delete())" Class="ml-auto">Delete</MudButton>
                                <MudSpacer></MudSpacer>
                                <MudButton Size="@Size.Small" Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(()=> GetCode())" Class="ml-auto">
                                    Add New Parent
                                </MudButton>
                            }
                            else
                            {
                                <MudButton Size="@Size.Small" Variant="Variant.Filled" Color="Color.Dark" OnClick="@(()=>Cancel())" Class="ml-auto">Cancel</MudButton>
                            }
                        }
                        else
                        {
                            <MudButton Size="@Size.Small" Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(()=> GetCode())" Class="ml-auto">
                                Add New Parent
                            </MudButton>
                        }
                    </MudStack>
                </MudCardActions>
            </MudCard>
        </EditForm>
           @if (model.Id > 0)
                            {
        <MudCard Class="mt-3">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Students</MudText>
                </CardHeaderContent>
                <CardHeaderActions>

                    <MudButton Size="@Size.Small" Variant="Variant.Filled" Color="Color.Success" Class="add-item-btn ml-auto" OnClick="@AddNewStudent">Add New Student</MudButton>
                </CardHeaderActions>
</MudCardHeader>
<MudCardContent>
            <MudDataGrid T="StudentModel" Items="@model.Students" Filterable="false" SortMode="@SortMode.None" Context="student"
                         Groupable="false">
              
                <Columns>
                    <PropertyColumn Property="x => x.Status">
                        <CellTemplate>
                            @((TransferStatus)context.Item.Status)
                        </CellTemplate>
                    </PropertyColumn>

                    <PropertyColumn Property="x => x.Section" />
                    <PropertyColumn Property="x => x.Grade" />
                    <PropertyColumn Property="x => x.Year" />
                    <PropertyColumn Property="x => x.Name2" />
                    <PropertyColumn Property="x => x.Code" />
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudStack Row>
                                <MudButton Size="@Size.Small" Variant="@Variant.Filled"
                                           OnClick="@(()=> ViewStudent(context.Item.Id))" Color="@Color.Primary">View/Edit</MudButton>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
            </MudCardContent>
        </MudCard>
        }
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "parentId")]
    public decimal ParentId { get; set; } = 0;

    [Parameter]
    [SupplyParameterFromQuery(Name = "studentId")]
    public decimal StudentId { get; set; } = 0;

    [CascadingParameter]
    public bool ShowOverlay { get; set; }

    [CascadingParameter(Name = "SelectedCustomer")]
    public Item? SelectedCustomer { get; set; }

    DataItem<AcademicLookups> lookups { get; set; } = new();
    ParentModel model = new();
    AdmissionModel studentModel = null;

    public decimal? searchBranchId { get; set; }
    public bool searchWithoutStudent { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        LoadRecentParents();
       await LoadDropDowns();
    }
    protected override async Task OnParametersSetAsync()
    {
        await LoadFormData();
    }
    private async Task LoadDropDowns()
    {
        lookups.Loading();
        var academicLookups = await _lookupService.Get(Lookup.All);

        if (academicLookups.IsSuccess)
            lookups.Success(academicLookups.Data!);
        else
            lookups.Fail(academicLookups.Message);

        StateHasChanged();
    }

    #region Searh
    private async Task<IEnumerable<Item>> Search(string value, CancellationToken token)
    {
        await Task.Delay(1000);

        if (string.IsNullOrEmpty(value))
            return Enumerable.Empty<Item>();

        ApiResult<IEnumerable<Item>> parents = await lookupService.Search((decimal)searchBranchId, searchTerm: value, noStudent: searchWithoutStudent);

        if (parents.IsSuccess)
            return parents.Data;

        return Enumerable.Empty<Item>();
    }
    private async Task LoadData(Item item)
    {
        if (item is not null)
        {
            ParentId = StudentId = 0;
            SelectedCustomer = item;
            LoadFormData();
        }
    }
    #endregion
    private async Task Cancel()
    {
        model = new();
        studentModel = new();
        StateHasChanged();
    }
    private async Task Delete()
    {
        bool? isConfirm = await DialogService.ShowMessageBox(
        "Confirm",
        "Are you sure, you want to delete?",
        yesText: "Yes", cancelText: "Cancel", options: new DialogOptions() { DisableBackdropClick = true });

        if (!(isConfirm ?? false)) return;

        var response = await _parentService.Delete(model.Id);
        if (response.IsSuccess)
        {
            Snackbar.Add("Successfully deleted", Severity.Success);
            ParentId = StudentId = 0;
            model = new();
        }
        else
        {
            Snackbar.Add(message: response.Message);
        }
    }
    private async Task LoadFormData()
    {
        if (SelectedCustomer is { Id: > 0 })
        {
            if (SelectedCustomer.Identity == Identity.Parent)
                ParentId = (decimal)SelectedCustomer.Id;
            else
                StudentId = (decimal)SelectedCustomer.Id;
        }

        if (ParentId > 0)
            await LoadParentData(ParentId);
        else if (StudentId > 0)
            await LoadStudentData(StudentId);
        else
            await SetFormData();

    }
    private async Task LoadParentData(decimal id, bool reload = false)
    {
        Snackbar.Add($"Loading parent data...", Severity.Info);

        var parentResult = await _parentService.GetParent(id);

        if (!parentResult.IsSuccess)
        {
            Snackbar.Add($"Parent data not found!", Severity.Info);
            return;
        }
        parentResult.Data.Modified = true;
        await SetFormData(parentResult.Data, studentModel);
    }
    private async Task LoadStudentData(decimal id)
    {
        Snackbar.Add($"Loading student data...", Severity.Info);

        var studentResult = await _studentService.GetStudent(id);

        if (!studentResult.IsSuccess)
        {
            Snackbar.Add($"Student data not found!", Severity.Info);
            return;
        }

        await SetFormData(model, _studentModel: studentResult.Data);
    }
    private async Task SetFormData(ParentModel? _model = null, AdmissionModel? _studentModel = null)
    {
      

        if (model.IsChanged(_model?.Code))
        {
            model = _model ?? new();
        }

        if (studentModel is null || studentModel.Code != _studentModel?.Code)
        {
            studentModel = _studentModel ?? new();
        }

        StateHasChanged();

        await Task.CompletedTask;
    }
    private async Task GetCode()
    {
        var result = await _parentService.GetNewCode();
        if (result.IsSuccess)
        {
            await SetFormData();
            model.Code = result.Data.ToString();
        }
        else
        {
            Snackbar.Add("Unable to fetch new code !", Severity.Info);
        }
    }
    private async Task AddNewStudent()
    {
        studentModel = new()
            {
                ParentId = (int)model.Id,
                Name12 = model.Name11,
                Name13 = model.Name12,
                Name14 = model.Name13,
                Name15 = model.Name14,
                Name22 = model.Name21,
                Name23 = model.Name22,
                Name24 = model.Name23,
                Name25 = model.Name24,
                OnlineStatus = (int)OnlineStatus.RegisterInSchool,
                StuStatus = (int)StudentStatus.ReservationAndNotPaid
            };

        await OpenStudentForm();
    }
    private async Task OpenStudentForm()
    {
        var dialogParam = new DialogParameters<StudentAdmission>();
        dialogParam.Add((x) => x.model, studentModel);
        dialogParam.Add((x) => x.lookups, lookups);
        DialogOptions fullScreen = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

        var dialog = await DialogService.ShowAsync<StudentAdmission>("Student Data", parameters: dialogParam, options: fullScreen);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            if ((result.Data as CustomDialogResult).NeedReload)
            {
                await LoadParentData(model.Id);
            }
        }
    }
    private async Task ViewStudent(decimal Id)
    {
        StudentId = Id;
        await LoadStudentData(Id);
        await OpenStudentForm();
    }
    private async void OnValidSubmit(EditContext context)
    {

        bool? isConfirm = await DialogService.ShowMessageBox(
        "Confirm",
        $"Are you sude you want to {(model.Id > 0 ? "Update" : "Save")}?",
        yesText: "Yes", cancelText: "Cancel", options: new DialogOptions() { DisableBackdropClick = true });

        if (!(isConfirm ?? false)) return;

        ShowOverlay = true;
        var result = await _parentService.Post(model);
        if (result.IsSuccess)
        {
            Snackbar.Add($"Successfully {(model.Id > 0 ? "Updated" : "Saved")} ", Severity.Success);
            model.Id = result.Data;
        }
        else
        {
            Snackbar.Add(result.Message, Severity.Error);
        }
        ShowOverlay = false;

        StateHasChanged();
    }


    DataItem<IEnumerable<ParentModel>> parentItems { get; set; } = new();
    private async Task LoadRecentParents()
    {
        parentItems.Loading();

        var result = await _parentService.GetRecentParents();

        if (result.IsSuccess)
            parentItems.Success(result.Data);
        else
            parentItems.Fail(result.Message);

        StateHasChanged();

    }
    private async Task OnChangeParentSelection(MudListItem item)
    {
        await LoadData(new() { Id = Convert.ToDecimal(item.Value) });
    }
}