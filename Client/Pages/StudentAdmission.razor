@using Creative.Client.Services;
@using Creative.Shared.Models;
@using MudBlazor
@inject NavigationManager navManager;
@inject ILookupService _lookupService;
@inject IParentService _parentService;
@inject IStudentService _studentService;
@inject IDialogService DialogService;
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <EditForm Model="model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="3">
                            <MudSelect T="int?" @bind-Value="model.OnlineStatus" Label="Online Status" AnchorOrigin="Origin.BottomCenter">
                                @foreach (OnlineStatus item in Enum.GetValues(typeof(OnlineStatus)))
                                {
                                    <MudSelectItem T="int?" Value="@((int)item)">@item.ToString()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>

                        <MudItem xs="3">
                            <MudSelect T="int?" @bind-Value="model.StuStatus" Label="Student Status"  AnchorOrigin="Origin.BottomCenter">
                                @foreach (StudentStatus item in Enum.GetValues(typeof(StudentStatus)))
                                {
                                               <MudSelectItem T="int?" Value="@((int)item)">@item.ToString()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>

                        <MudItem xs="3">
                            <MudTextField ReadOnly="true" Label="Code" InputType="InputType.Number" @bind-Value="model.Code" For="@(() => model.Code)" HideSpinButtons="true" />
                        </MudItem>
                        <MudItem xs="3">
                            <MudRadioGroup @bind-SelectedOption="model.Gender">
                    <MudRadio Option=1 Color="Color.Primary" Dense="true">Male</MudRadio>
                    <MudRadio Option=0 Color="Color.Secondary" Dense="true">Female</MudRadio>
                </MudRadioGroup>
                        </MudItem>

                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="6" sm="3">
                                    <MudTextField Label="First Name (Ar)" Margin="Margin.Dense" InputType="InputType.Text"
                                    @bind-Value="model.Name11" For="@(() => model.Name11)" />
                                </MudItem>
                                <MudItem xs="6" sm="3">
                                    <MudTextField Label="Mid Name (Ar)" Margin="Margin.Dense" InputType="InputType.Text"
                                    @bind-Value="model.Name12" For="@(() => model.Name12)" />
                                </MudItem>
                                <MudItem xs="6" sm="3">
                                    <MudTextField Label="Last Name (Ar)" Margin="Margin.Dense" InputType="InputType.Text"
                                    @bind-Value="model.Name13" For="@(() => model.Name13)" />
                                </MudItem>
                                <MudItem xs="6" sm="3">
                                    <MudTextField Label="Family Name (Ar)" Margin="Margin.Dense" InputType="InputType.Text"
                                    @bind-Value="model.Name14" For="@(() => model.Name14)" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>

                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="6" sm="3">
                                    <MudTextField Label="First Name (En)" Margin="Margin.Dense" InputType="InputType.Text"
                                    @bind-Value="model.Name21" For="@(() => model.Name21)" />
                                </MudItem>
                                <MudItem xs="6" sm="3">
                                    <MudTextField Label="First Name (En)" Margin="Margin.Dense" InputType="InputType.Text"
                                    @bind-Value="model.Name22" For="@(() => model.Name22)" />
                                </MudItem>
                                <MudItem xs="6" sm="3">
                                    <MudTextField Label="First Name (En)" Margin="Margin.Dense" InputType="InputType.Text"
                                    @bind-Value="model.Name23" For="@(() => model.Name23)" />
                                </MudItem>
                                <MudItem xs="6" sm="3">
                                    <MudTextField Label="First Name (En)" Margin="Margin.Dense" InputType="InputType.Text"
                                    @bind-Value="model.Name24" For="@(() => model.Name24)" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>

                        <MudItem xs="6">
                            <MudTextField Label="Notes" Margin="Margin.Dense" Lines="3"
                            @bind-Value="model.Notes" For="@(() => model.Notes)" InputType="InputType.Text" />
                        </MudItem>

                        <MudItem xs="6">
                            <MudTextField Label="Dept Chat" Margin="Margin.Dense" Lines="3"
                            @bind-Value="model.DeptNotes" For="@(() => model.DeptNotes)" InputType="InputType.Text" />
                        </MudItem>

                        <MudItem xs="3">
                            @if (lookups.Status == DataStatus.Loading)
                            {
                                <MudSkeleton />
                            }
                            @if (lookups.Status == DataStatus.Loaded)
                            {
                                <MudSelect T="int?" Label="Job" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.NationalId">
                                    @foreach (var item in lookups.Data.Nationals)
                                    {
                                        <MudSelectItem T="int?" Value="@((int)item.Id)">@item.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            }
                        </MudItem>

                        <MudItem xs="3">
                            @if (lookups.Status == DataStatus.Loading)
                            {
                                <MudSkeleton />
                            }
                            @if (lookups.Status == DataStatus.Loaded)
                            {
                                <MudSelect T="int?" Label="Religions" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.RelegionId">
                                    @foreach (var item in lookups.Data.Religions)
                                    {
                                                    <MudSelectItem T="int?" Value="@((int)item.Id)">@item.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            }
                        </MudItem>


                        <MudItem xs="3">
                            <MudSelect T="int?" @bind-Value="model.Result" Label="Student Result" AnchorOrigin="Origin.BottomCenter" >
                                @foreach (StudentResult item in Enum.GetValues(typeof(StudentResult)))
                                {
                                    <MudSelectItem T="int?" Value="@((int)item)">@item.ToString()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem> 

                       <MudItem xs="3">
                            <MudSelect  T="int?" @bind-Value="model.StudentType" Label="Student Status" AnchorOrigin="Origin.BottomCenter">
                                @foreach (StudentType item in Enum.GetValues(typeof(StudentType)))
                                {
                                             <MudSelectItem T="int?" Value="@((int)item)">@item.ToString()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem> 

                        <MudItem xs="12">
                            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                                <MudTabPanel Text="School Data">
                                    <MudGrid>
                                        <MudItem  xs="2">
                                            <MudDatePicker Label="Admission Date" Margin="Margin.Dense" DateFormat="dd/MM/yyyy"
                                            @bind-Date="model.AdmissionDate" For="@(() => model.AdmissionDate)" />
                                        </MudItem>
                                        <MudItem xs="2">
                                            <MudDatePicker Label="Registration Date" Margin="Margin.Dense" DateFormat="dd/MM/yyyy"
                                            @bind-Date="model.RegistrationDate" For="@(() => model.RegistrationDate)" />
                                        </MudItem>
                                        <MudItem xs="2">
                                            <MudDatePicker Label="Join Date" Margin="Margin.Dense" DateFormat="dd/MM/yyyy"
                                            @bind-Date="model.JoinDate" For="@(() => model.JoinDate)" />
                                        </MudItem>

                                        <MudItem xs="3">
                                            <MudTextField Label="Mother Name" Margin="Margin.Dense"
                                            @bind-Value="model.MotherName" For="@(() => model.MotherName)" InputType="InputType.Text" />
                                        </MudItem>
                                        <MudItem xs="3">
                                            <MudTextField Label="Mother CivilID" Margin="Margin.Dense"
                                            @bind-Value="model.MotherCivilID" For="@(() => model.MotherCivilID)" InputType="InputType.Number" />
                                        </MudItem>

                                     <MudItem xs="2">
                                            @if (lookups.Status == DataStatus.Loading)
                                            {
                                                <MudSkeleton />
                                            }
                                            @if (lookups.Status == DataStatus.Loaded)
                                            {
                                                <MudSelect T="int?" Label="Next Branch" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.ComeBranchId">
                                                    @foreach (var item in lookups.Data.Branches)
                                                    {
                                                        <MudSelectItem T="int?" Value="@((int)item.Id)">@item.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            }
                                        </MudItem>

                                        <MudItem xs="2">
                                            @if (lookups.Status == DataStatus.Loading)
                                            {
                                                <MudSkeleton />
                                            }
                                            @if (lookups.Status == DataStatus.Loaded)
                                            {
                                                <MudSelect T="decimal?" Label="Next Grade" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.ComeGradeId">
                                                    @foreach (var item in lookups.Data.Grades)
                                                    {
                                                        <MudSelectItem T="decimal?" Value="@((decimal)item.Id)">@item.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            }
                                        </MudItem>

                                        <MudItem xs="2">
                                            @if (lookups.Status == DataStatus.Loading)
                                            {
                                                <MudSkeleton />
                                            }
                                            @if (lookups.Status == DataStatus.Loaded)
                                            {
                                                <MudSelect T="int?" Label="Next Year" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.ComeYearId">
                                                    @foreach (var item in lookups.Data.Years)
                                                    {
                                                       <MudSelectItem T="int?" Value="@((int)item.Id)">@item.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            }
                                        </MudItem>

                                        <MudItem xs="2">
                                            @if (lookups.Status == DataStatus.Loading)
                                            {
                                                <MudSkeleton />
                                            }
                                            @if (lookups.Status == DataStatus.Loaded)
                                            {
                                                <MudSelect T="int?" Label="Current Branch"  SelectedValuesChanged="GetClasses" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.CurBranchId">
                                                    @foreach (var item in lookups.Data.Branches)
                                                    {
                                                       <MudSelectItem T="int?" Value="@((int)item.Id)">@item.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            }
                                        </MudItem>

                                        <MudItem xs="2">
                                            @if (lookups.Status == DataStatus.Loading)
                                            {
                                                <MudSkeleton />
                                            }
                                            @if (lookups.Status == DataStatus.Loaded)
                                            {
                                                <MudSelect T="int?" Label="Current Grade" SelectedValuesChanged="GetClasses" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.CurGradeId">
                                                    @foreach (var item in lookups.Data.Grades)
                                                    {
                                                         <MudSelectItem T="int?" Value="@((int)item.Id)">@item.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            }
                                        </MudItem>

                                        <MudItem xs="2">
                                            @if (lookups.Status == DataStatus.Loading)
                                            {
                                                <MudSkeleton />
                                            }
                                            @if (lookups.Status == DataStatus.Loaded)
                                            {
                                                <MudSelect T="int?" Label="Current Year" SelectedValuesChanged="GetClasses" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.CurYearId">
                                                    @foreach (var item in lookups.Data.Years)
                                                    {
                                                       <MudSelectItem T="int?" Value="@((int)item.Id)">@item.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            }
                                        </MudItem> 

                                        <MudItem xs="2">
                                          
                                                <MudSelect T="int?" Label="Current Class" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.CurClassId">
                                                      @if (ClassItems.Status == DataStatus.Loading)
                                            {
                                                <MudSkeleton />
                                            }
                                            @if (ClassItems.Status == DataStatus.Loaded)
                                            {
                                                    @foreach (var item in ClassItems.Data)
                                                    {
                                                       <MudSelectItem T="int?" Value="@((int)item.Id)">@item.Name</MudSelectItem>
                                                    }  
                                                     }
                                                </MudSelect>
                                         
                                        </MudItem> 

                                        <MudItem xs="2">
                                            <MudCheckBox Label="Health Status" @bind-Checked="model.HealthStatus" Color="Color.Primary"></MudCheckBox>
                                        </MudItem>

                                      <MudItem xs="2">
                                            <MudDatePicker Label="Examination Date" Margin="Margin.Dense" DateFormat="dd/MM/yyyy"
                                            @bind-Date="model.ExaminationDate" For="@(() => model.ExaminationDate)" />
                                        </MudItem>

                                     <MudItem xs="2">
                                            <MudTextField Label="Examination Result" Margin="Margin.Dense"
                                            @bind-Value="model.ExaminationResult" For="@(() => model.ExaminationResult)" InputType="InputType.Text" />
                                        </MudItem>

                                        <MudItem xs="3">
                                            <MudTextField Label="Education Decision No" Margin="Margin.Dense"
                                            @bind-Value="model.EducationDecisionNo" For="@(() => model.EducationDecisionNo)" InputType="InputType.Number" />
                                        </MudItem>

                                        <MudItem xs="3">
                                            @if (lookups.Status == DataStatus.Loading)
                                            {
                                                <MudSkeleton />
                                            }
                                            @if (lookups.Status == DataStatus.Loaded)
                                            {
                                                <MudSelect T="decimal?" Label="Disablity As Per The Decision" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.DisablityAsPerTheDecisionId">
                                                    @foreach (var item in lookups.Data.HandicapTypes)
                                                    {
                                                        <MudSelectItem T="decimal?" Value="@(item.Id)">@item.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            }
                                        </MudItem> 

                                       <MudItem xs="3">
                                            <MudDatePicker Label="Decision Date" Margin="Margin.Dense" DateFormat="dd/MM/yyyy"
                                            @bind-Date="model.EduDecisionDate" For="@(() => model.EduDecisionDate)" />
                                        </MudItem>

                                     <MudItem xs="3">
                                            <MudDatePicker Label="Decision End Date" Margin="Margin.Dense" DateFormat="dd/MM/yyyy"
                                            @bind-Date="model.NextVisitDate" For="@(() => model.NextVisitDate)" />
                                        </MudItem>

                                        <MudItem xs="3">
                                            <MudTextField Label="File Number" Margin="Margin.Dense"
                                            @bind-Value="model.HealthFileNo" For="@(() => model.HealthFileNo)" InputType="InputType.Number" />
                                        </MudItem>

                                         <MudItem xs="3">
                                            @if (lookups.Status == DataStatus.Loading)
                                            {
                                                <MudSkeleton />
                                            }
                                            @if (lookups.Status == DataStatus.Loaded)
                                            {
                                                <MudSelect T="decimal?" Label="Disablity As The certificate" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.DisablityCertificateId">
                                                    @foreach (var item in lookups.Data.HandicapTypes)
                                                    {
                                                        <MudSelectItem T="decimal?" Value="@(item.Id)">@item.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            }
                                        </MudItem> 

                                     <MudItem xs="3">
                                            <MudDatePicker Label="Certificat Date" Margin="Margin.Dense" DateFormat="dd/MM/yyyy"
                                            @bind-Date="model.EduProveDate" For="@(() => model.EduProveDate)" />
                                        </MudItem>

                                       <MudItem xs="3">
                                            <MudDatePicker Label="Certificate Expire Date" Margin="Margin.Dense" DateFormat="dd/MM/yyyy"
                                            @bind-Date="model.EduProveEndDate" For="@(() => model.EduProveEndDate)" />
                                        </MudItem>
                                      
                                    </MudGrid>
                                </MudTabPanel>
                                <MudTabPanel Text="Personal Data">
                                    <MudGrid>
                                     <MudItem xs="3">
                                            <MudTextField Label="Tel1" Margin="Margin.Dense"
                                            @bind-Value="model.Tel1" For="@(() => model.Tel1)" InputType="InputType.Number" />
                                        </MudItem>
                                      <MudItem xs="3">
                                            <MudTextField Label="Tel2" Margin="Margin.Dense"
                                            @bind-Value="model.Tel2" For="@(() => model.Tel2)" InputType="InputType.Number"/>
                                        </MudItem>
                                       <MudItem xs="3">
                                            <MudTextField Label="Email" Margin="Margin.Dense"
                                            @bind-Value="model.Email" For="@(() => model.Email)" InputType="InputType.Email" />
                                        </MudItem>
                                     <MudItem xs="3">
                                            <MudTextField Label="Address" Margin="Margin.Dense"
                                            @bind-Value="model.Address1" For="@(() => model.Address1)" InputType="InputType.Text" />
                                        </MudItem>
                                        <MudItem>
                                            <MudDatePicker Label="Passport Date" Margin="Margin.Dense" DateFormat="dd/MM/yyyy" 
                                            @bind-Value="model.PassportDate" For="@(() => model.PassportDate)" />
                                        </MudItem>

                                        <MudItem>
                                            <MudTextField Label="Birth Place" Margin="Margin.Dense"
                                            @bind-Value="model.BirthPlace" For="@(() => model.BirthPlace)" InputType="InputType.Text" />
                                        </MudItem>

                                        <MudItem>
                                            <MudTextField Label="Birth Doc Place" Margin="Margin.Dense"
                                            @bind-Value="model.BirthDocPlace" For="@(() => model.BirthDocPlace)" InputType="InputType.Text" />
                                        </MudItem>

                                        <MudItem>
                                            <MudTextField Label="CertificateNumber" Margin="Margin.Dense"
                                            @bind-Value="model.CertificateNumber" For="@(() => model.CertificateNumber)" InputType="InputType.Text" />
                                        </MudItem>

                                        <MudItem>
                                            <MudTextField Label="Id Number" Margin="Margin.Dense"
                                            @bind-Value="model.IdNumber" For="@(() => model.IdNumber)" InputType="InputType.Number" />
                                        </MudItem>

                                        <MudItem>
                                            <MudDatePicker Label="Id End Date" Margin="Margin.Dense"
                                            @bind-Value="model.EndDate" For="@(() => model.EndDate)" DateFormat="dd/MM/yyyy" />
                                        </MudItem>
                                    </MudGrid>
                                </MudTabPanel>
                                <MudTabPanel Text="Admission Data">
                                    <MudGrid>
                                        <MudItem xs="6">
                                            <MudCheckBox @bind-Checked="@model.AcpApprove" Label="Certificate of no objection" Color="Color.Primary"></MudCheckBox>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudCheckBox @bind-Checked="@model.AcpDirect" Label="Direct Admission" Color="Color.Primary"></MudCheckBox>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudCheckBox @bind-Checked="@model.AcpTransferCertificate" Label="Transfer Certificate" Color="Color.Primary"></MudCheckBox>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudCheckBox @bind-Checked="@model.AcpRecommend" Label="Has Recomended" Color="Color.Primary"></MudCheckBox>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudCheckBox @bind-Checked="@model.BrotherReg" Label="Has Sibling already registered" Color="Color.Primary"></MudCheckBox>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudCheckBox @bind-Checked="@model.AcpEquivalencyCertificate" Label="Equivalancy Certificate" Color="Color.Primary"></MudCheckBox>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudCheckBox @bind-Checked="@model.AcpClearance" Label="Clearance" Color="Color.Primary"></MudCheckBox>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudCheckBox @bind-Checked="@model.BrotherAcp" Label="Has Sibling already admission in same time" Color="Color.Primary"></MudCheckBox>
                                        </MudItem>

                                        <MudItem xs="6">
                                            <MudCheckBox @bind-Checked="@model.AcpHealthFile" Label="Healthy life" Color="Color.Primary"></MudCheckBox>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudCheckBox @bind-Checked="@model.ResEmp" Label="Employee Children" Color="Color.Primary"></MudCheckBox>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudCheckBox @bind-Checked="@model.OnlineStatus" Label="Online Registration" Color="Color.Primary"></MudCheckBox>
                                        </MudItem>
                                    </MudGrid>
                                </MudTabPanel>
                                <MudTabPanel Text="Exams">
                                    @* <MudDataGrid T="Element" Items="@Elements.Take(4)" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
    StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <PropertyColumn Property="x => x.Number" Title="Nr" IsEditable="false" />
        <PropertyColumn Property="x => x.Sign" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Position">
            <EditTemplate>
                <MudSelect @bind-Value="context.Item.Position" Required RequiredError="You must select a Position!!!" Margin="@Margin.Dense">
                    <MudSelectItem Value="0">zero</MudSelectItem>
                    <MudSelectItem Value="1">one</MudSelectItem>
                    <MudSelectItem Value="17">seventeen</MudSelectItem>
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Molar" Title="Molar mass" />
        <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid> *@

                                </MudTabPanel>
                            </MudTabs>
                        </MudItem>

                        <MudItem>
                            <ValidationSummary />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudStack Row="true" Justify="Justify.FlexStart">
                        @if (decimal.TryParse(model.Code, out decimal _code) && _code > 0)
                        {
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                            if (model.Id > 0)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Error" Class="ml-auto">Delete</MudButton>
                            }
                        }
                        else
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(()=> GetCode())" Class="ml-auto">New</MudButton>
                        }
                    </MudStack>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public AdmissionModel model { get; set; } = new();
    [Parameter] public DataItem<AcademicLookups> lookups { get; set; } = new();

 public DataItem<IEnumerable<Item>> ClassItems { get; set; } = new();
         private async Task GetClasses()
     {
        var result = await  _lookupService.GetClass((decimal)model.CurGradeId,(decimal)model.CurBranchId,model.Gender.ToString());
        if(result.IsSuccess){
ClassItems.Success(result.Data);
        }
        
     }
        protected override Task OnInitializedAsync()
        {
            return base.OnInitializedAsync();
        }
        protected override  async Task OnParametersSetAsync()
        {
            if(string.IsNullOrEmpty( model.Code))
            await GetCode();
        }
    
    private async Task GetCode()
    {
        var result = await _studentService.GetNewCode();
        if (result.IsSuccess)
        {
            await SetFormData();
            model.Code = result.Data.ToString();
        }
        else
        {
            Snackbar.Add("Unable to fetch new code !", Severity.Info);
        }
    }

    private async void OnValidSubmit(EditContext context)
    {

        bool? isConfirm = await DialogService.ShowMessageBox(
            "Confirm",
            "Are you sude you want to save?",
            yesText: "Yes", cancelText: "Cancel", options: new DialogOptions() { DisableBackdropClick = true });

        if (!(isConfirm ?? false)) return;

        //ShowOverlay = true;
        StateHasChanged();
        var result = await _studentService.Post(model);
        if (result.IsSuccess)
        {
            Snackbar.Add("New Parent Added Successfully", Severity.Success);
            model.Id = result.Data;
        }
        else
        {
            Snackbar.Add(result.Message, Severity.Error);
        }
        //ShowOverlay = false;
        StateHasChanged();
    }

    private async Task SetFormData(ParentModel? _model = null, RegStudentModel? studentModel = null)
    {
        //if (IsFirstRender)
        //    await LoadDropDowns();

        //IsDataLoaded = true;
        studentModel = studentModel ?? new();
        await Task.CompletedTask;
    }


      @* private IEnumerable<ExamEditModel> Elements = new List<ExamEditModel>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick; *@

    @* protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");
    } *@

    // events
    @* void StartedEditingItem(Element item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(Element item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(Element item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    } *@
}