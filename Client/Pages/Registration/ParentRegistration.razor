@page "/registration"
@using System.ComponentModel.DataAnnotations;
@using Creative.Client.Models;
@using Creative.Client.Pages.ACP;
@using Creative.Client.Pages.Components
@using Creative.Client.Services;
@using Creative.Shared.Models;
@using Creative.Shared;
@using System.Linq;
@using MudBlazor

@inject NavigationManager navManager;
@inject ILookupService _lookupService;
@inject IParentService _parentService;
@inject IStudentService _studentService;
@inject IDialogService DialogService;
@inject ILookupService lookupService
@inject ISnackbar Snackbar
<PageTitle>Registration - Parent  Screen</PageTitle>

<MudGrid>
    <MudItem md="12"><MudText Typo="Typo.h5">Registration - Parent  Screen</MudText></MudItem>
    <MudItem md="2">
        <MudSelect T="decimal?" Label="Branch" AnchorOrigin="Origin.BottomCenter" @bind-Value="searchBranchId">
            <MudSelectItem T="decimal?" Value="0">All</MudSelectItem>
            <MudItems DT="ItemType.Decimal" Lookups="lookups[Lookup.Branches]"></MudItems>
        </MudSelect>

        <MudCheckBox Label="InCompleted Entry" @bind-Checked="searchWithoutStudent" Color="Color.Primary"></MudCheckBox>
        <MudAutocomplete IconSize="Size.Small" MaxItems="100" ProgressIndicatorColor="Color.Success" InputMode="InputMode.search"
                         DebounceInterval="500" Clearable="true" AutoFocus="true" Immediate="false" Dense="true"
                         Margin="Margin.Dense" ResetValueOnEmptyText="true" MinCharacters="1" KeyDownPreventDefault="true"
                         KeyUpPreventDefault="true" T="Item" Placeholder="Type to search" Variant="Variant.Outlined"
                         SearchFuncWithCancel="@Search"
                         ValueChanged="@LoadData" ShowProgressIndicator="true" HelperText="Search by Parent/Student Name,CivilId,Code,Tel1,Tel2">
            <ProgressIndicatorTemplate>
                <MudProgressLinear Size="Size.Small" Indeterminate="true" Color="Color.Default" />
            </ProgressIndicatorTemplate>
            <ItemTemplate Context="e">
                <MudText Typo="Typo.subtitle2">
                    @($"{e.Name} - {e.Identity.ToString()}")
                </MudText>
            </ItemTemplate>
            <NoItemsTemplate>
                <MudText Align="Align.Center" Class="px-4 py-1">
                    No data found
                </MudText>
            </NoItemsTemplate>
        </MudAutocomplete>


        <MudPaper Width="100%">
            <MudText Typo="Typo.h6" Class="m-2">Recent Parents</MudText>
            @if (parentItems.Status == DataStatus.Loading)
            {
                for (int i = 0; i < 5; i++)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Text"></MudSkeleton>
                }
            }
            else
            {
                <MudList Clickable="true" Dense="true" SelectedItemChanged="OnChangeParentSelection">
                    @foreach (var parent in parentItems.Data)
                    {
                        <MudListItem Value="@parent.Id" Text="@parent.Name1"></MudListItem>
                    }
                </MudList>
            }
        </MudPaper>

    </MudItem>
    <MudItem md="10">
        <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardHeader>
                        <h2>Parent Data</h2>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="2">
                                <MudTextField ReadOnly="true" Label="Code" tabindex="1" InputType="InputType.Number" @bind-Value="model.Code"
                                              For="@(() => model.Code)" HideSpinButtons="true" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudGrid>
                                    <MudItem xs="6" sm="3">
                                        <MudTextField Label="Family Name (Ar)" tabindex="5" OnBlur=@(async ()=>{ await inputfocusRef.FocusAsync(); }) Margin="Margin.Dense" InputType="InputType.Text"
                                        @bind-Value="model.Name14" For="@(() => model.Name14)" />
                                    </MudItem>
                                    <MudItem xs="6" sm="3">
                                        <MudTextField Label="Last Name (Ar)" tabindex="4" Margin="Margin.Dense" InputType="InputType.Text"
                                        @bind-Value="model.Name13" For="@(() => model.Name13)" />
                                    </MudItem>
                                    <MudItem xs="6" sm="3">
                                        <MudTextField Label="Mid Name (Ar)" tabindex="3" Margin="Margin.Dense" InputType="InputType.Text"
                                        @bind-Value="model.Name12" For="@(() => model.Name12)" />
                                    </MudItem>
                                    <MudItem xs="6" sm="3">
                                        <MudTextField Label="First Name (Ar) *" @ref=nameArabicRef tabindex="2" Margin="Margin.Dense" InputType="InputType.Text"
                                        @bind-Value="model.Name11" For="@(() => model.Name11)" />
                                    </MudItem>
                                </MudGrid>
                            </MudItem>

                            <MudItem xs="12">
                                <MudGrid>
                                    <MudItem xs="6" sm="3">
                                        <MudTextField Label="First Name (En) *" @ref=inputfocusRef Margin="Margin.Dense" InputType="InputType.Text"
                                        @bind-Value="model.Name21" For="@(() => model.Name21)" />
                                    </MudItem>
                                    <MudItem xs="6" sm="3">
                                        <MudTextField Label="First Name (En)" Margin="Margin.Dense" InputType="InputType.Text"
                                        @bind-Value="model.Name22" For="@(() => model.Name22)" />
                                    </MudItem>
                                    <MudItem xs="6" sm="3">
                                        <MudTextField Label="First Name (En)" Margin="Margin.Dense" InputType="InputType.Text"
                                        @bind-Value="model.Name23" For="@(() => model.Name23)" />
                                    </MudItem>
                                    <MudItem xs="6" sm="3">
                                        <MudTextField Label="First Name (En)" Margin="Margin.Dense" InputType="InputType.Text"
                                        @bind-Value="model.Name24" For="@(() => model.Name24)" />
                                    </MudItem>
                                </MudGrid>
                            </MudItem>



                            <MudItem xs="3">
                                <MudSelect T="decimal?" Label="Job" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.JobId">
                                    <MudItems DT="ItemType.Decimal" Lookups="lookups[Lookup.Jobs]"></MudItems>
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="3">
                                <MudNumericField Label="Civil ID *" Margin="Margin.Dense" HideSpinButtons="true" @bind-Value="model.IdNo" For="@(() => model.IdNo)" InputType="InputType.Number" />
                            </MudItem>

                            <MudItem xs="3">
                                <MudDatePicker Editable="true" IconSize="Size.Small" Label="Civil ID Expire Date *" Margin="Margin.Dense" DateFormat="dd/MM/yyyy"
                                @bind-Date="model.IdEndDate" For="@(() => model.IdEndDate)" />
                            </MudItem>

                            <MudItem xs="3">
                                <MudNumericField HideSpinButtons="true" Label="Tel1 *" Margin="Margin.Dense" @bind-Value="model.Tel1" For="@(() => model.Tel1)" InputType="InputType.Telephone" />
                            </MudItem>

                            <MudItem xs="3">
                                <MudNumericField HideSpinButtons="true" Label="Tel2" Margin="Margin.Dense" @bind-Value="model.Tel2" For="@(() => model.Tel2)" InputType="InputType.Telephone" />
                            </MudItem>

                            <MudItem xs="3">
                                <MudTextField Label="Address *" Margin="Margin.Dense" @bind-Value="model.Address1" For="@(() => model.Address1)" InputType="InputType.Text" />
                            </MudItem>


                            <MudItem xs="3">
                                <MudTextField Label="Dept Chat" Margin="Margin.Dense" @bind-Value="model.Notes" For="@(() => model.Notes)" InputType="InputType.Text" />
                            </MudItem>
                            @* <MudItem>
                            <ValidationSummary />
                            </MudItem> *@
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </EditForm>
        </MudFocusTrap>
        <MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="Student Data">
                <MudCard Class="mt-3">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Students</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudButton Size="@Size.Small" Variant="Variant.Filled" Color="Color.Success" Class="add-item-btn ml-auto" OnClick="@AddNewStudent">Add New Student</MudButton>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudDataGrid T="StudentModel" Items="@model.Students" Filterable="false" SortMode="@SortMode.None" Context="student"
                                     Groupable="false">

                            <Columns>
                                <PropertyColumn Property="x => x.Status">
                                    <CellTemplate>
                                        @((TransferStatus)context.Item.Status)
                                    </CellTemplate>
                                </PropertyColumn>

                                <PropertyColumn Property="x => x.Section" />
                                <PropertyColumn Property="x => x.Grade" />
                                <PropertyColumn Property="x => x.Year" />
                                <PropertyColumn Property="x => x.Name2" />
                                <PropertyColumn Property="x => x.Code" />
                                <TemplateColumn CellClass="d-flex justify-end">
                                    <CellTemplate>
                                        <MudStack Row>
                                            <MudButton Size="@Size.Small" Variant="@Variant.Filled"
                                                       OnClick="@(()=> ViewStudent(context.Item.Id))" Color="@Color.Primary">View/Edit</MudButton>
                                        </MudStack>
                                    </CellTemplate>
                                </TemplateColumn>
                            </Columns>
                        </MudDataGrid>
                    </MudCardContent>
                </MudCard>
            </MudTabPanel>
            <MudTabPanel Text="Communication">
                <MudGrid Class="mt-3">
                    <MudItem xs="3">
                        <MudNumericField HideSpinButtons="true" Label="Tel1" Margin="Margin.Dense"
                                         @bind-Value="model.Tel1" For="@(() => model.Tel1)" InputType="InputType.Number" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudNumericField HideSpinButtons="true" Label="Tel2" Margin="Margin.Dense"
                                         @bind-Value="model.Tel2" For="@(() => model.Tel2)" InputType="InputType.Number" />
                    </MudItem>

                    <MudItem xs="3">
                        <MudNumericField HideSpinButtons="true" Label="Emergency Tel" Margin="Margin.Dense"
                                         @bind-Value="model.EmergencyTel" For="@(() => model.EmergencyTel)" InputType="InputType.Number" />
                    </MudItem>
                    <MudItem xs="3">

                        <MudSelect T="int?" Label="Goverment" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.GovermentId">
                            <MudItems DT="ItemType.Int" Lookups="lookups[Lookup.Goverment]"></MudItems>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="3">
                        <MudSelect T="int" Label="Area" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.AreaId">
                            <MudItems DT="ItemType.Int" Lookups="lookups[Lookup.Area]"></MudItems>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="3">
                        <MudSelect T="int" Label="Part" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.PartId">
                            <MudItems DT="ItemType.Int" Lookups="lookups[Lookup.Part]"></MudItems>
                        </MudSelect>
                    </MudItem>


                    <MudItem xs="3">
                        <MudTextField Label="Home Address" Margin="Margin.Dense"
                                      @bind-Value="model.HomeAddress" For="@(() => model.HomeAddress)" InputType="InputType.Text" />
                    </MudItem>

                    <MudItem xs="3">
                        <MudTextField Label="Work Address" Margin="Margin.Dense"
                                      @bind-Value="model.WorkAddress" For="@(() => model.WorkAddress)" InputType="InputType.Text" />
                    </MudItem>

                    <MudItem xs="3">
                        <MudTextField Label="Email" Margin="Margin.Dense"
                                      @bind-Value="model.Email" For="@(() => model.Email)" InputType="InputType.Email" />
                    </MudItem>

                    <MudItem xs="3">
                        <MudTextField Label="Financial Notes" Margin="Margin.Dense"
                                      @bind-Value="model.FinancialNotes" For="@(() => model.FinancialNotes)" InputType="InputType.Text" />
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
            <MudTabPanel Text="Data">
                <MudGrid Class="mt-3">

                    <MudItem xs="3">
                        <MudSelect T="decimal?" Label="Nationality" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.NationalId">
                            <MudItems DT="ItemType.Decimal" Lookups="lookups[Lookup.Nationals]"></MudItems>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="3">
                        <MudSelect T="decimal?" Label="Job" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.JobId">
                            <MudItems DT="ItemType.Decimal" Lookups="lookups[Lookup.Jobs]"></MudItems>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="3">
                        <MudSelect T="int?" Label="ID Type" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.IdTypeId">
                            <MudItems DT="ItemType.Int" Lookups="lookups[Lookup.IdType]"></MudItems>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="3">
                        <MudTextField Label="Id No" Margin="Margin.Dense" @bind-Value="model.IdNo" For="@(() => model.IdNo)" InputType="InputType.Text" />
                    </MudItem>

                    <MudItem xs="3">
                        <MudDatePicker Editable="true" IconSize="Size.Small" Label="Ending Date *" Margin="Margin.Dense" DateFormat="dd/MM/yyyy"
                                       @bind-Date="model.IdEndDate" For="@(() => model.IdEndDate)" />
                    </MudItem>

                    <MudItem xs="3">
                        <MudDatePicker Editable="true" IconSize="Size.Small" Label="Birth Date *" Margin="Margin.Dense" DateFormat="dd/MM/yyyy"
                                       @bind-Date="model.BirthDate" For="@(() => model.BirthDate)" />
                    </MudItem>


                    <MudItem xs="3">
                        <MudNumericField HideSpinButtons="true" Label="Resedence No" Margin="Margin.Dense" @bind-Value="model.ResedenceNo" For="@(() => model.ResedenceNo)" InputType="InputType.Number" />
                    </MudItem>



                    <MudItem xs="3">
                        <MudDatePicker Editable="true" IconSize="Size.Small" Label="Resedence EndDate*" Margin="Margin.Dense" DateFormat="dd/MM/yyyy"
                                       @bind-Date="model.ResedenceEndDate" For="@(() => model.ResedenceEndDate)" />
                    </MudItem>


                    <MudItem xs="3">
                        <MudSelect T="int?" Label="Passport Type" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.PassportType">
                            <MudItems DT="ItemType.Int" Lookups="lookups[Lookup.Nationals]"></MudItems>
                        </MudSelect>
                    </MudItem>



                    <MudItem xs="3">
                        <MudNumericField HideSpinButtons="true" Label="Passport Number" Margin="Margin.Dense" @bind-Value="model.PassportNumber" For="@(() => model.PassportNumber)" InputType="InputType.Number" />
                    </MudItem>


                    <MudItem xs="3">
                        <MudDatePicker Editable="true" IconSize="Size.Small" Label="Passport Issuance Date*" Margin="Margin.Dense" DateFormat="dd/MM/yyyy"
                                       @bind-Date="model.PassportIssuanceDate" For="@(() => model.PassportIssuanceDate)" />
                    </MudItem>

                    <MudItem xs="3">
                        <MudDatePicker Editable="true" IconSize="Size.Small" Label="Passport EndDate*" Margin="Margin.Dense" DateFormat="dd/MM/yyyy"
                                       @bind-Date="model.PassportEndDate" For="@(() => model.PassportEndDate)" />
                    </MudItem>


                    @* Accounts *@

                    <MudItem xs="3">
                        <MudSelect T="int?" Label="Account" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.AccountId">
                            <MudItems DT="ItemType.Int" Lookups="lookups[Lookup.AccAccounts]"></MudItems>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="3">
                        <MudSelect T="int?" Label="Analyst Account" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.AnalystAccount">
                            <MudItems DT="ItemType.Int" Lookups="lookups[Lookup.AccAnalyses]"></MudItems>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="3">
                        <MudSelect T="int?" Label="Advance Account" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.AdvanceAccount">
                            <MudItems DT="ItemType.Int" Lookups="lookups[Lookup.AccAccCats]"></MudItems>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="3">
                        <MudSelect T="int?" Label="Cost Center Account" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.CostCenterAccount">
                            <MudItems DT="ItemType.Int" Lookups="lookups[Lookup.AccCost]"></MudItems>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="3">
                        <MudSelect T="int?" Label="Old Debit Account" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.OldDebitAccount">
                            <MudItems DT="ItemType.Int" Lookups="lookups[Lookup.AccAccounts]"></MudItems>
                        </MudSelect>
                    </MudItem>



                    <MudItem xs="3">
                        <MudSelect T="int?" Label="Expensis Account" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.ExpensisAccount">
                            <MudItems DT="ItemType.Int" Lookups="lookups[Lookup.AccExpenses]"></MudItems>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="3">
                        <MudSelect T="int?" Label="Book Account" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.BookAccount">
                            <MudItems DT="ItemType.Int" Lookups="lookups[Lookup.BooksAccounts]"></MudItems>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="3">
                        <MudSelect T="int?" Label="Bus Account" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.BusAccount">
                            <MudItems DT="ItemType.Int" Lookups="lookups[Lookup.BusAccount]"></MudItems>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="3">
                        <MudSelect T="int?" Label="Uniform Account" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.UniformAccount">
                            <MudItems DT="ItemType.Int" Lookups="lookups[Lookup.AccAccounts]"></MudItems>
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
        </MudTabs>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "parentId")]
    public decimal ParentId { get; set; } = 0;

    [Parameter]
    [SupplyParameterFromQuery(Name = "studentId")]
    public decimal StudentId { get; set; } = 0;

    [CascadingParameter]
    public bool ShowOverlay { get; set; }

    [CascadingParameter(Name = "SelectedCustomer")]
    public Item? SelectedCustomer { get; set; }

    Dictionary<Lookup, DataItem<IEnumerable<Item>>> lookups { get; set; } = new();
    ParentRegistrationModel model = new();
    StudentRegistrationModel studentModel = null;

    public decimal? searchBranchId { get; set; } = 0;
    public bool searchWithoutStudent { get; set; } = false;
    private MudTextField<string> inputfocusRef { get; set; }
    private MudTextField<string> nameArabicRef { get; set; }

    protected override async Task OnInitializedAsync()
    {
        foreach (Lookup item in Enum.GetValues(typeof(Lookup)))
        {
            lookups.Add(item, null);
        }

        LoadRecentParents();
        LoadDropDowns();
    }
    protected override async Task OnParametersSetAsync()
    {
        await LoadFormData();
    }


    private async Task loadItem(Lookup lookup)
    {
        DataItem<IEnumerable<Item>> item = new();

        var academicLookups = await _lookupService.Get(lookup);
        if (academicLookups.IsSuccess)
            item.Success(academicLookups.Data!);
        else
            item.Fail(academicLookups.Message);

        lookups[lookup] = item;
        StateHasChanged();
    }
    private async Task LoadDropDowns()
    {
        foreach (Lookup item in Enum.GetValues(typeof(Lookup)))
        {
            loadItem(item);
        }
    }

    #region Searh
    private async Task<IEnumerable<Item>> Search(string value, CancellationToken token)
    {
        await Task.Delay(1000);

        if (string.IsNullOrEmpty(value))
            return Enumerable.Empty<Item>();

        ApiResult<IEnumerable<Item>> parents = await lookupService.Search((decimal)searchBranchId, searchTerm: value, noStudent: searchWithoutStudent, pageSize: 50);

        if (parents.IsSuccess)
            return parents.Data;

        return Enumerable.Empty<Item>();
    }
    private async Task LoadData(Item item)
    {
        if (item is not null)
        {
            ParentId = StudentId = 0;
            SelectedCustomer = item;
            LoadFormData();
        }
    }
    #endregion
    private async Task Cancel()
    {
        model = new();
        studentModel = new();
        StateHasChanged();
    }
    private async Task Delete()
    {
        bool? isConfirm = await DialogService.ShowMessageBox(
        "Confirm",
        "Are you sure, you want to delete?",
        yesText: "Yes", cancelText: "Cancel", options: new DialogOptions() { DisableBackdropClick = true });

        if (!(isConfirm ?? false)) return;

        var response = await _parentService.Delete(model.Id);
        if (response.IsSuccess)
        {
            Snackbar.Add("Successfully deleted", Severity.Success);
            ParentId = StudentId = 0;
            model = new();
        }
        else
        {
            Snackbar.Add(message: response.Message);
        }
    }
    private async Task LoadFormData()
    {
        if (SelectedCustomer is { Id: > 0 })
        {
            if (SelectedCustomer.Identity == Identity.Parent)
                ParentId = (decimal)SelectedCustomer.Id;
            else
                StudentId = (decimal)SelectedCustomer.Id;
        }

        if (ParentId > 0)
            await LoadParentData(ParentId);
        else if (StudentId > 0)
            await LoadStudentData(StudentId);
        else
            await SetFormData();

    }
    private async Task LoadParentData(decimal id, bool reload = false)
    {
        Snackbar.Add($"Loading parent data...", Severity.Info);

        // var parentResult = await _parentService.GetParent(id);

        // if (!parentResult.IsSuccess)
        // {
        //     Snackbar.Add($"Parent data not found!", Severity.Info);
        //     return;
        // }
        // parentResult.Data.Modified = true;
        // await SetFormData(parentResult.Data, studentModel);
    }
    private async Task LoadStudentData(decimal id)
    {
        Snackbar.Add($"Loading student data...", Severity.Info);

        // var studentResult = await _studentService.GetStudent(id);

        // if (!studentResult.IsSuccess)
        // {
        //     Snackbar.Add($"Student data not found!", Severity.Info);
        //     return;
        // }

        // await SetFormData(model, _studentModel: studentResult.Data);
        OpenStudentForm();
    }
    private async Task SetFormData(ParentRegistrationModel? _model = null, StudentRegistrationModel? _studentModel = null)
    {


        if (model.IsChanged(_model?.Code))
        {
            model = _model ?? new();
        }

        if (studentModel is null || studentModel.Code != _studentModel?.Code)
        {
            studentModel = _studentModel ?? new();
        }

        StateHasChanged();

        await Task.CompletedTask;
    }
    private async Task GetCode()
    {
        var result = await _parentService.GetNewCode();
        if (result.IsSuccess)
        {
            await SetFormData();
            model.Code = result.Data.ToString();
            await nameArabicRef.FocusAsync();
        }
        else
        {
            Snackbar.Add("Unable to fetch new code !", Severity.Info);
        }
    }
    private async Task AddNewStudent()
    {
        studentModel = new()
            {
                ParentId = (int)model.Id,
                Name12 = model.Name11,
                Name13 = model.Name12,
                Name14 = model.Name13,
                Name15 = model.Name14,
                Name22 = model.Name21,
                Name23 = model.Name22,
                Name24 = model.Name23,
                Name25 = model.Name24,
                OnlineStatus = (int)OnlineStatus.RegisterInSchool,
                StuStatus = (int)StudentStatus.ReservationAndNotPaid,
                NationalId = (int?)model.NationalId
            };

        await OpenStudentForm();
    }
    private async Task OpenStudentForm()
    {
        var dialogParam = new DialogParameters<StudentRegistration>();
        dialogParam.Add((x) => x.model, studentModel);
        dialogParam.Add((x) => x.lookups, lookups);
        DialogOptions fullScreen = new DialogOptions() { DisableBackdropClick = true, CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

        var dialog = await DialogService.ShowAsync<StudentRegistration>("Registration - Student Data", parameters: dialogParam, options: fullScreen);
        var result = await dialog.Result;
        if (!result.Cancelled && (result.Data as CustomDialogResult).NeedReload)
        {
            await LoadParentData((decimal)studentModel.ParentId);
        }
    }
    private async Task ViewStudent(decimal Id)
    {
        StudentId = Id;
        await LoadStudentData(Id);
    }
    private async void OnValidSubmit(EditContext context)
    {

        bool? isConfirm = await DialogService.ShowMessageBox(
        "Confirm",
        $"Are you sude you want to {(model.Id > 0 ? "Update" : "Save")}?",
        yesText: "Yes", cancelText: "Cancel", options: new DialogOptions() { DisableBackdropClick = true });

        if (!(isConfirm ?? false)) return;

        ShowOverlay = true;
        // var result = await _parentService.Post(model);
        // if (result.IsSuccess)
        // {
        //     Snackbar.Add($"Successfully {(model.Id > 0 ? "Updated" : "Saved")} ", Severity.Success);
        //     model.Id = result.Data;
        //     LoadRecentParents();
        // }
        // else
        // {
        //     Snackbar.Add(result.Message, Severity.Error);
        // }
        ShowOverlay = false;

        StateHasChanged();
    }


    DataItem<IEnumerable<ParentRegistrationModel>> parentItems { get; set; } = new();
    private async Task LoadRecentParents()
    {
        parentItems.Loading();

        // var result = await _parentService.GetRecentParents();

        // if (result.IsSuccess)
        //     parentItems.Success(result.Data);
        // else
        //     parentItems.Fail(result.Message);

        StateHasChanged();

    }
    private async Task OnChangeParentSelection(MudListItem item)
    {
        await LoadData(new() { Id = Convert.ToDecimal(item.Value) });
    }
}